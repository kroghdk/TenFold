// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/BluPrivatePCH.h"
#include "Blu.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeBlu() {}
	void UBluBlueprintFunctionLibrary::StaticRegisterNativesUBluBlueprintFunctionLibrary()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBluBlueprintFunctionLibrary::StaticClass(),"JSONToString",(Native)&UBluBlueprintFunctionLibrary::execJSONToString);
		FNativeFunctionRegistrar::RegisterFunction(UBluBlueprintFunctionLibrary::StaticClass(),"NewBluEye",(Native)&UBluBlueprintFunctionLibrary::execNewBluEye);
		FNativeFunctionRegistrar::RegisterFunction(UBluBlueprintFunctionLibrary::StaticClass(),"NewBluJSONObj",(Native)&UBluBlueprintFunctionLibrary::execNewBluJSONObj);
		FNativeFunctionRegistrar::RegisterFunction(UBluBlueprintFunctionLibrary::StaticClass(),"ParseJSON",(Native)&UBluBlueprintFunctionLibrary::execParseJSON);
		FNativeFunctionRegistrar::RegisterFunction(UBluBlueprintFunctionLibrary::StaticClass(),"RunBluEventLoop",(Native)&UBluBlueprintFunctionLibrary::execRunBluEventLoop);
	}
	IMPLEMENT_CLASS(UBluBlueprintFunctionLibrary, 1660596328);
static class UEnum* EBluSpecialKeys_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern BLU_API class UEnum* Z_Construct_UEnum_Blu_EBluSpecialKeys();
		extern BLU_API class UPackage* Z_Construct_UPackage_Blu();
		Singleton = GetStaticEnum(Z_Construct_UEnum_Blu_EBluSpecialKeys, Z_Construct_UPackage_Blu(), TEXT("EBluSpecialKeys"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EBluSpecialKeys(EBluSpecialKeys_StaticEnum, TEXT("/Script/Blu"));
	void UBluEye::StaticRegisterNativesUBluEye()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"CharKeyPress",(Native)&UBluEye::execCharKeyPress);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"CloseBrowser",(Native)&UBluEye::execCloseBrowser);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"ExecuteJS",(Native)&UBluEye::execExecuteJS);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"ExecuteJSMethodWithParams",(Native)&UBluEye::execExecuteJSMethodWithParams);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"GetMaterialInstance",(Native)&UBluEye::execGetMaterialInstance);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"GetTexture",(Native)&UBluEye::execGetTexture);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"init",(Native)&UBluEye::execinit);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"IsBrowserLoading",(Native)&UBluEye::execIsBrowserLoading);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"KeyDown",(Native)&UBluEye::execKeyDown);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"KeyPress",(Native)&UBluEye::execKeyPress);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"KeyUp",(Native)&UBluEye::execKeyUp);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"LoadURL",(Native)&UBluEye::execLoadURL);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"NavBack",(Native)&UBluEye::execNavBack);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"NavForward",(Native)&UBluEye::execNavForward);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"RawCharKeyPress",(Native)&UBluEye::execRawCharKeyPress);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"ReloadBrowser",(Native)&UBluEye::execReloadBrowser);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"ResizeBrowser",(Native)&UBluEye::execResizeBrowser);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"SpecialKeyPress",(Native)&UBluEye::execSpecialKeyPress);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerLeftClick",(Native)&UBluEye::execTriggerLeftClick);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerLeftMouseDown",(Native)&UBluEye::execTriggerLeftMouseDown);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerLeftMouseUp",(Native)&UBluEye::execTriggerLeftMouseUp);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerMouseMove",(Native)&UBluEye::execTriggerMouseMove);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerMouseWheel",(Native)&UBluEye::execTriggerMouseWheel);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerRightClick",(Native)&UBluEye::execTriggerRightClick);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerRightMouseDown",(Native)&UBluEye::execTriggerRightMouseDown);
		FNativeFunctionRegistrar::RegisterFunction(UBluEye::StaticClass(),"TriggerRightMouseUp",(Native)&UBluEye::execTriggerRightMouseUp);
	}
	IMPLEMENT_CLASS(UBluEye, 283091859);
	void UBluJsonObj::StaticRegisterNativesUBluJsonObj()
	{
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getBooleanArray",(Native)&UBluJsonObj::execgetBooleanArray);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getBooleanValue",(Native)&UBluJsonObj::execgetBooleanValue);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getNestedObject",(Native)&UBluJsonObj::execgetNestedObject);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getNumArray",(Native)&UBluJsonObj::execgetNumArray);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getNumValue",(Native)&UBluJsonObj::execgetNumValue);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getStringArray",(Native)&UBluJsonObj::execgetStringArray);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"getStringValue",(Native)&UBluJsonObj::execgetStringValue);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"setBooleanValue",(Native)&UBluJsonObj::execsetBooleanValue);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"setNestedObject",(Native)&UBluJsonObj::execsetNestedObject);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"setNumValue",(Native)&UBluJsonObj::execsetNumValue);
		FNativeFunctionRegistrar::RegisterFunction(UBluJsonObj::StaticClass(),"setStringValue",(Native)&UBluJsonObj::execsetStringValue);
	}
	IMPLEMENT_CLASS(UBluJsonObj, 85732972);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FCharacterEvent();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	SLATECORE_API class UScriptStruct* Z_Construct_UScriptStruct_FKeyEvent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector2D();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();

	BLU_API class UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_JSONToString();
	BLU_API class UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluEye();
	BLU_API class UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluJSONObj();
	BLU_API class UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_ParseJSON();
	BLU_API class UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_RunBluEventLoop();
	BLU_API class UClass* Z_Construct_UClass_UBluBlueprintFunctionLibrary_NoRegister();
	BLU_API class UClass* Z_Construct_UClass_UBluBlueprintFunctionLibrary();
	BLU_API class UFunction* Z_Construct_UDelegateFunction_Blu_ScriptEvent__DelegateSignature();
	BLU_API class UEnum* Z_Construct_UEnum_Blu_EBluSpecialKeys();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_CharKeyPress();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_CloseBrowser();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_ExecuteJS();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_ExecuteJSMethodWithParams();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_GetMaterialInstance();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_GetTexture();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_init();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_IsBrowserLoading();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_KeyDown();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_KeyPress();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_KeyUp();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_LoadURL();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_NavBack();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_NavForward();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_RawCharKeyPress();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_ReloadBrowser();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_ResizeBrowser();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_SpecialKeyPress();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerLeftClick();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerLeftMouseDown();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerLeftMouseUp();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerMouseMove();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerMouseWheel();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerRightClick();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerRightMouseDown();
	BLU_API class UFunction* Z_Construct_UFunction_UBluEye_TriggerRightMouseUp();
	BLU_API class UClass* Z_Construct_UClass_UBluEye_NoRegister();
	BLU_API class UClass* Z_Construct_UClass_UBluEye();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getBooleanArray();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getBooleanValue();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getNestedObject();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getNumArray();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getNumValue();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getStringArray();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_getStringValue();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_setBooleanValue();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_setNestedObject();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_setNumValue();
	BLU_API class UFunction* Z_Construct_UFunction_UBluJsonObj_setStringValue();
	BLU_API class UClass* Z_Construct_UClass_UBluJsonObj_NoRegister();
	BLU_API class UClass* Z_Construct_UClass_UBluJsonObj();
	BLU_API class UPackage* Z_Construct_UPackage_Blu();
	UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_JSONToString()
	{
		struct BluBlueprintFunctionLibrary_eventJSONToString_Parms
		{
			UBluJsonObj* ObjectToParse;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluBlueprintFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("JSONToString"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(BluBlueprintFunctionLibrary_eventJSONToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, BluBlueprintFunctionLibrary_eventJSONToString_Parms), 0x0000000000000580);
			UProperty* NewProp_ObjectToParse = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ObjectToParse"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ObjectToParse, BluBlueprintFunctionLibrary_eventJSONToString_Parms), 0x0000000000000080, Z_Construct_UClass_UBluJsonObj_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("JSON To String"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("blui blu eye json parse string"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluBlueprintFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluEye()
	{
		struct BluBlueprintFunctionLibrary_eventNewBluEye_Parms
		{
			UObject* WorldContextObject;
			UBluEye* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluBlueprintFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NewBluEye"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(BluBlueprintFunctionLibrary_eventNewBluEye_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluBlueprintFunctionLibrary_eventNewBluEye_Parms), 0x0000000000000580, Z_Construct_UClass_UBluEye_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, BluBlueprintFunctionLibrary_eventNewBluEye_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("BluEye"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Create BluEye"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("new create blu eye blui"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluBlueprintFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluJSONObj()
	{
		struct BluBlueprintFunctionLibrary_eventNewBluJSONObj_Parms
		{
			UObject* WorldContextObject;
			UBluJsonObj* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluBlueprintFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NewBluJSONObj"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(BluBlueprintFunctionLibrary_eventNewBluJSONObj_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluBlueprintFunctionLibrary_eventNewBluJSONObj_Parms), 0x0000000000000580, Z_Construct_UClass_UBluJsonObj_NoRegister());
			UProperty* NewProp_WorldContextObject = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("WorldContextObject"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(WorldContextObject, BluBlueprintFunctionLibrary_eventNewBluJSONObj_Parms), 0x0000000000000080, Z_Construct_UClass_UObject_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("JSON"));
			MetaData->SetValue(ReturnFunction, TEXT("DefaultToSelf"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Create BluJSON Obj"));
			MetaData->SetValue(ReturnFunction, TEXT("HidePin"), TEXT("WorldContextObject"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("new create blu eye blui json"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluBlueprintFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_ParseJSON()
	{
		struct BluBlueprintFunctionLibrary_eventParseJSON_Parms
		{
			FString JSONString;
			UBluJsonObj* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluBlueprintFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ParseJSON"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(BluBlueprintFunctionLibrary_eventParseJSON_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluBlueprintFunctionLibrary_eventParseJSON_Parms), 0x0000000000000580, Z_Construct_UClass_UBluJsonObj_NoRegister());
			UProperty* NewProp_JSONString = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("JSONString"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(JSONString, BluBlueprintFunctionLibrary_eventParseJSON_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Parse JSON String"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("blui blu eye json parse"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluBlueprintFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluBlueprintFunctionLibrary_RunBluEventLoop()
	{
		UObject* Outer=Z_Construct_UClass_UBluBlueprintFunctionLibrary();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RunBluEventLoop"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Run BLUI Tick"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("blui blu eye blui tick"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluBlueprintFunctionLibrary.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBluBlueprintFunctionLibrary_NoRegister()
	{
		return UBluBlueprintFunctionLibrary::StaticClass();
	}
	UClass* Z_Construct_UClass_UBluBlueprintFunctionLibrary()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage_Blu();
			OuterClass = UBluBlueprintFunctionLibrary::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_JSONToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluEye());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluJSONObj());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_ParseJSON());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_RunBluEventLoop());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_JSONToString()); // 1296918863
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluEye()); // 3202990365
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_NewBluJSONObj()); // 1245660051
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_ParseJSON()); // 1053968039
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluBlueprintFunctionLibrary_RunBluEventLoop()); // 3345452800
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Blu"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BluBlueprintFunctionLibrary.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/BluBlueprintFunctionLibrary.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBluBlueprintFunctionLibrary(Z_Construct_UClass_UBluBlueprintFunctionLibrary, TEXT("UBluBlueprintFunctionLibrary"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBluBlueprintFunctionLibrary);
	UFunction* Z_Construct_UDelegateFunction_Blu_ScriptEvent__DelegateSignature()
	{
		struct _Script_Blu_eventScriptEvent_Parms
		{
			FString EventName;
			FString EventMessage;
		};
		UObject* Outer=Z_Construct_UPackage_Blu();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ScriptEvent__DelegateSignature"), RF_Public|RF_Transient|RF_Native) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_Blu_eventScriptEvent_Parms));
			UProperty* NewProp_EventMessage = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventMessage"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(EventMessage, _Script_Blu_eventScriptEvent_Parms), 0x0000000000000080);
			UProperty* NewProp_EventName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EventName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(EventName, _Script_Blu_eventScriptEvent_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
#endif
		}
		return ReturnFunction;
	}
	UEnum* Z_Construct_UEnum_Blu_EBluSpecialKeys()
	{
		UPackage* Outer=Z_Construct_UPackage_Blu();
		extern uint32 Get_Z_Construct_UEnum_Blu_EBluSpecialKeys_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReload(Outer, TEXT("EBluSpecialKeys"), 0, Get_Z_Construct_UEnum_Blu_EBluSpecialKeys_CRC());
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EBluSpecialKeys"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("backspacekey")), 8));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("tabkey")), 9));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("enterkey")), 13));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("pausekey")), 19));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("escapekey")), 27));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("pageupkey")), 33));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("pagedownkey")), 34));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("endkey")), 35));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("homekey")), 36));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("leftarrowkey")), 37));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("rightarrowkey")), 38));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("downarrowkey")), 39));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("uparrowkey")), 40));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("insertkey")), 45));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("deletekey")), 46));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("numlockkey")), 144));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("scrolllockkey")), 145));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EBluSpecialKeys_MAX")), 146));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Regular);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("backspacekey.DisplayName"), TEXT("Backspace"));
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("deletekey.DisplayName"), TEXT("Delete"));
			MetaData->SetValue(ReturnEnum, TEXT("downarrowkey.DisplayName"), TEXT("Down Arrow"));
			MetaData->SetValue(ReturnEnum, TEXT("endkey.DisplayName"), TEXT("End"));
			MetaData->SetValue(ReturnEnum, TEXT("enterkey.DisplayName"), TEXT("Enter"));
			MetaData->SetValue(ReturnEnum, TEXT("escapekey.DisplayName"), TEXT("Escape"));
			MetaData->SetValue(ReturnEnum, TEXT("homekey.DisplayName"), TEXT("Home"));
			MetaData->SetValue(ReturnEnum, TEXT("insertkey.DisplayName"), TEXT("Insert"));
			MetaData->SetValue(ReturnEnum, TEXT("leftarrowkey.DisplayName"), TEXT("Left Arrow"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnEnum, TEXT("numlockkey.DisplayName"), TEXT("Num Lock"));
			MetaData->SetValue(ReturnEnum, TEXT("pagedownkey.DisplayName"), TEXT("Page Down"));
			MetaData->SetValue(ReturnEnum, TEXT("pageupkey.DisplayName"), TEXT("Page Up"));
			MetaData->SetValue(ReturnEnum, TEXT("pausekey.DisplayName"), TEXT("Pause"));
			MetaData->SetValue(ReturnEnum, TEXT("rightarrowkey.DisplayName"), TEXT("Right Arrow"));
			MetaData->SetValue(ReturnEnum, TEXT("scrolllockkey.DisplayName"), TEXT("Scroll Lock"));
			MetaData->SetValue(ReturnEnum, TEXT("tabkey.DisplayName"), TEXT("Tab"));
			MetaData->SetValue(ReturnEnum, TEXT("uparrowkey.DisplayName"), TEXT("Up Arrow"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_Blu_EBluSpecialKeys_CRC() { return 1784706344U; }
	UFunction* Z_Construct_UFunction_UBluEye_CharKeyPress()
	{
		struct BluEye_eventCharKeyPress_Parms
		{
			FCharacterEvent CharEvent;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CharKeyPress"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventCharKeyPress_Parms));
			UProperty* NewProp_CharEvent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CharEvent"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(CharEvent, BluEye_eventCharKeyPress_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FCharacterEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a character key event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_CloseBrowser()
	{
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloseBrowser"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Close the browser"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_ExecuteJS()
	{
		struct BluEye_eventExecuteJS_Parms
		{
			FString code;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExecuteJS"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventExecuteJS_Parms));
			UProperty* NewProp_code = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("code"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(code, BluEye_eventExecuteJS_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Execute JS code inside the browser"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_ExecuteJSMethodWithParams()
	{
		struct BluEye_eventExecuteJSMethodWithParams_Parms
		{
			FString methodName;
			TArray<FString> params;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ExecuteJSMethodWithParams"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventExecuteJSMethodWithParams_Parms));
			UProperty* NewProp_params = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("params"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(params, BluEye_eventExecuteJSMethodWithParams_Parms), 0x0000000000000082);
			UProperty* NewProp_params_Inner = new(EC_InternalUseOnlyConstructor, NewProp_params, TEXT("params"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_methodName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("methodName"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(methodName, BluEye_eventExecuteJSMethodWithParams_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Execute Javascript With Params"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("js javascript parameters"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Execute a JS function/method by name with FString Array as params.\nEach element in the array will be passed into the function in order and separated by a ,\nIf you want to pass a JSON string as an object, simply don't put quotes around the outside braces {\"foo\" : \"bar\"}\nIf you want to pass a number, do similar: 10.5\nTo pass as a string, place quotes around the param when adding to the array: \"10.5\" and \"hello\" are strings"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_GetMaterialInstance()
	{
		struct BluEye_eventGetMaterialInstance_Parms
		{
			UMaterialInstanceDynamic* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMaterialInstance"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(BluEye_eventGetMaterialInstance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluEye_eventGetMaterialInstance_Parms), 0x0000000000000580, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedFunction"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecatedNode"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("DeprecationMessage"), TEXT("Please use raw texture using GetTexture method. GetMaterialInstance will be removed in the next release!"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_GetTexture()
	{
		struct BluEye_eventGetTexture_Parms
		{
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTexture"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(BluEye_eventGetTexture_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluEye_eventGetTexture_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the texture data from our UI component"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_init()
	{
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("init"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Initialize function, should be called after properties are set"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_IsBrowserLoading()
	{
		struct BluEye_eventIsBrowserLoading_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsBrowserLoading"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventIsBrowserLoading_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BluEye_eventIsBrowserLoading_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BluEye_eventIsBrowserLoading_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BluEye_eventIsBrowserLoading_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Check if the browser is still loading"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_KeyDown()
	{
		struct BluEye_eventKeyDown_Parms
		{
			FKeyEvent InKey;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KeyDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventKeyDown_Parms));
			UProperty* NewProp_InKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InKey, BluEye_eventKeyDown_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a key down event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_KeyPress()
	{
		struct BluEye_eventKeyPress_Parms
		{
			FKeyEvent InKey;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KeyPress"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventKeyPress_Parms));
			UProperty* NewProp_InKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InKey, BluEye_eventKeyPress_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a key press event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_KeyUp()
	{
		struct BluEye_eventKeyUp_Parms
		{
			FKeyEvent InKey;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("KeyUp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventKeyUp_Parms));
			UProperty* NewProp_InKey = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InKey"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(InKey, BluEye_eventKeyUp_Parms), 0x0000000000000080, Z_Construct_UScriptStruct_FKeyEvent());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a key up event"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_LoadURL()
	{
		struct BluEye_eventLoadURL_Parms
		{
			FString newURL;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("LoadURL"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventLoadURL_Parms));
			UProperty* NewProp_newURL = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newURL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(newURL, BluEye_eventLoadURL_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Load a new URL into the browser"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_NavBack()
	{
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavBack"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Navigate back in this web view's history"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_NavForward()
	{
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("NavForward"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Navigate forward in this web view's history"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_RawCharKeyPress()
	{
		struct BluEye_eventRawCharKeyPress_Parms
		{
			FString charToPress;
			bool isRepeat;
			bool LeftShiftDown;
			bool RightShiftDown;
			bool LeftControlDown;
			bool RightControlDown;
			bool LeftAltDown;
			bool RightAltDown;
			bool LeftCommandDown;
			bool RightCommandDown;
			bool CapsLocksOn;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RawCharKeyPress"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventRawCharKeyPress_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(CapsLocksOn, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_CapsLocksOn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsLocksOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CapsLocksOn, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(CapsLocksOn, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightCommandDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_RightCommandDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightCommandDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightCommandDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightCommandDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftCommandDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_LeftCommandDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftCommandDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftCommandDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftCommandDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightAltDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_RightAltDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightAltDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightAltDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightAltDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftAltDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_LeftAltDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftAltDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftAltDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftAltDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightControlDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_RightControlDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightControlDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightControlDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightControlDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftControlDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_LeftControlDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftControlDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftControlDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftControlDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightShiftDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_RightShiftDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightShiftDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightShiftDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightShiftDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftShiftDown, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_LeftShiftDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftShiftDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftShiftDown, BluEye_eventRawCharKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftShiftDown, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(isRepeat, BluEye_eventRawCharKeyPress_Parms, bool);
			UProperty* NewProp_isRepeat = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("isRepeat"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(isRepeat, BluEye_eventRawCharKeyPress_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(isRepeat, BluEye_eventRawCharKeyPress_Parms), sizeof(bool), true);
			UProperty* NewProp_charToPress = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("charToPress"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(charToPress, BluEye_eventRawCharKeyPress_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a raw keypress via a character"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_ReloadBrowser()
	{
		struct BluEye_eventReloadBrowser_Parms
		{
			bool IgnoreCache;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ReloadBrowser"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventReloadBrowser_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(IgnoreCache, BluEye_eventReloadBrowser_Parms, bool);
			UProperty* NewProp_IgnoreCache = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("IgnoreCache"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(IgnoreCache, BluEye_eventReloadBrowser_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(IgnoreCache, BluEye_eventReloadBrowser_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Reloads the browser's current page"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_ResizeBrowser()
	{
		struct BluEye_eventResizeBrowser_Parms
		{
			int32 NewWidth;
			int32 NewHeight;
			UTexture2D* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ResizeBrowser"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventResizeBrowser_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluEye_eventResizeBrowser_Parms), 0x0000000000000580, Z_Construct_UClass_UTexture2D_NoRegister());
			UProperty* NewProp_NewHeight = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewHeight"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewHeight, BluEye_eventResizeBrowser_Parms), 0x0000000000000082);
			UProperty* NewProp_NewWidth = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewWidth"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(NewWidth, BluEye_eventResizeBrowser_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Resize the browser's viewport"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_SpecialKeyPress()
	{
		struct BluEye_eventSpecialKeyPress_Parms
		{
			TEnumAsByte<EBluSpecialKeys> key;
			bool LeftShiftDown;
			bool RightShiftDown;
			bool LeftControlDown;
			bool RightControlDown;
			bool LeftAltDown;
			bool RightAltDown;
			bool LeftCommandDown;
			bool RightCommandDown;
			bool CapsLocksOn;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpecialKeyPress"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluEye_eventSpecialKeyPress_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(CapsLocksOn, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_CapsLocksOn = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("CapsLocksOn"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(CapsLocksOn, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(CapsLocksOn, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightCommandDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_RightCommandDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightCommandDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightCommandDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightCommandDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftCommandDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_LeftCommandDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftCommandDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftCommandDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftCommandDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightAltDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_RightAltDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightAltDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightAltDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightAltDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftAltDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_LeftAltDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftAltDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftAltDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftAltDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightControlDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_RightControlDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightControlDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightControlDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightControlDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftControlDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_LeftControlDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftControlDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftControlDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(LeftControlDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(RightShiftDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_RightShiftDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("RightShiftDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(RightShiftDown, BluEye_eventSpecialKeyPress_Parms), 0x0000040000000080, CPP_BOOL_PROPERTY_BITMASK(RightShiftDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(LeftShiftDown, BluEye_eventSpecialKeyPress_Parms, bool);
			UProperty* NewProp_LeftShiftDown = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("LeftShiftDown"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(LeftShiftDown, BluEye_eventSpecialKeyPress_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(LeftShiftDown, BluEye_eventSpecialKeyPress_Parms), sizeof(bool), true);
			UProperty* NewProp_key = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("key"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(key, BluEye_eventSpecialKeyPress_Parms), 0x0000000000000080, Z_Construct_UEnum_Blu_EBluSpecialKeys());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("AdvancedDisplay"), TEXT("2"));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerLeftClick()
	{
		struct BluEye_eventTriggerLeftClick_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerLeftClick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerLeftClick_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerLeftClick_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerLeftClick_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a LEFT click in the browser via a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerLeftMouseDown()
	{
		struct BluEye_eventTriggerLeftMouseDown_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerLeftMouseDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerLeftMouseDown_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerLeftMouseDown_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerLeftMouseDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a LEFT MOUSE DOWN in the browser via a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerLeftMouseUp()
	{
		struct BluEye_eventTriggerLeftMouseUp_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerLeftMouseUp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerLeftMouseUp_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerLeftMouseUp_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerLeftMouseUp_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a LEFT MOUSE UP in the browser via a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerMouseMove()
	{
		struct BluEye_eventTriggerMouseMove_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerMouseMove"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerMouseMove_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerMouseMove_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerMouseMove_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Move the mouse in the browser"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerMouseWheel()
	{
		struct BluEye_eventTriggerMouseWheel_Parms
		{
			float MouseWheelDelta;
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerMouseWheel"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerMouseWheel_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerMouseWheel_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerMouseWheel_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			UProperty* NewProp_MouseWheelDelta = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MouseWheelDelta"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MouseWheelDelta, BluEye_eventTriggerMouseWheel_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Move the mouse in the browser"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerRightClick()
	{
		struct BluEye_eventTriggerRightClick_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerRightClick"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerRightClick_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerRightClick_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerRightClick_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a RIGHT click in the browser via a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerRightMouseDown()
	{
		struct BluEye_eventTriggerRightMouseDown_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerRightMouseDown"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerRightMouseDown_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerRightMouseDown_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerRightMouseDown_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a RIGHT MOUSE DOWN in the browser via a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluEye_TriggerRightMouseUp()
	{
		struct BluEye_eventTriggerRightMouseUp_Parms
		{
			FVector2D pos;
			float scale;
		};
		UObject* Outer=Z_Construct_UClass_UBluEye();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("TriggerRightMouseUp"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(BluEye_eventTriggerRightMouseUp_Parms));
			UProperty* NewProp_scale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("scale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(scale, BluEye_eventTriggerRightMouseUp_Parms), 0x0000000000000082);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(pos, BluEye_eventTriggerRightMouseUp_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector2D());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_scale"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Trigger a RIGHT MOUSE UP in the browser via a Vector2D"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBluEye_NoRegister()
	{
		return UBluEye::StaticClass();
	}
	UClass* Z_Construct_UClass_UBluEye()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Blu();
			OuterClass = UBluEye::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_CharKeyPress());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_CloseBrowser());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_ExecuteJS());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_ExecuteJSMethodWithParams());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_GetMaterialInstance());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_GetTexture());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_init());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_IsBrowserLoading());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_KeyDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_KeyPress());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_KeyUp());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_LoadURL());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_NavBack());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_NavForward());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_RawCharKeyPress());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_ReloadBrowser());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_ResizeBrowser());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_SpecialKeyPress());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerLeftClick());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerLeftMouseDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerLeftMouseUp());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerMouseMove());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerMouseWheel());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerRightClick());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerRightMouseDown());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluEye_TriggerRightMouseUp());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ScriptEventEmitter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScriptEventEmitter"), RF_Public|RF_Transient|RF_Native) UMulticastDelegateProperty(CPP_PROPERTY_BASE(ScriptEventEmitter, UBluEye), 0x0000000010080000, Z_Construct_UDelegateFunction_Blu_ScriptEvent__DelegateSignature());
				UProperty* NewProp_TextureParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureParameterName"), RF_Public|RF_Transient|RF_Native) UNameProperty(CPP_PROPERTY_BASE(TextureParameterName, UBluEye), 0x0000000000000015);
				UProperty* NewProp_BaseMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BaseMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BaseMaterial, UBluEye), 0x0000000000000005, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_Height = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Height"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Height, UBluEye), 0x0000000000000005);
				UProperty* NewProp_Width = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Width"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(Width, UBluEye), 0x0000000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsTransparent, UBluEye, bool);
				UProperty* NewProp_bIsTransparent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bIsTransparent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsTransparent, UBluEye), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsTransparent, UBluEye), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, UBluEye, bool);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, UBluEye), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnabled, UBluEye), sizeof(bool), true);
				UProperty* NewProp_DefaultURL = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultURL"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(DefaultURL, UBluEye), 0x0000000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_CharKeyPress()); // 681832286
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_CloseBrowser()); // 79341079
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_ExecuteJS()); // 779114029
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_ExecuteJSMethodWithParams()); // 2058674510
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_GetMaterialInstance()); // 917271103
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_GetTexture()); // 2017033850
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_init()); // 2480046846
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_IsBrowserLoading()); // 3004197387
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_KeyDown()); // 4033206585
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_KeyPress()); // 2822566761
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_KeyUp()); // 1650298909
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_LoadURL()); // 2717877587
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_NavBack()); // 1340836178
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_NavForward()); // 2959719496
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_RawCharKeyPress()); // 4082750937
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_ReloadBrowser()); // 639867859
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_ResizeBrowser()); // 1357108460
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_SpecialKeyPress()); // 1903054399
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerLeftClick()); // 3743150343
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerLeftMouseDown()); // 1200157882
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerLeftMouseUp()); // 3303781624
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerMouseMove()); // 3683690892
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerMouseWheel()); // 1229860341
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerRightClick()); // 1222431241
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerRightMouseDown()); // 1698596306
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluEye_TriggerRightMouseUp()); // 431663334
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Blu"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BluEye.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_ScriptEventEmitter, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_ScriptEventEmitter, TEXT("ToolTip"), TEXT("Javascript event emitter"));
				MetaData->SetValue(NewProp_TextureParameterName, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_TextureParameterName, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_TextureParameterName, TEXT("ToolTip"), TEXT("Name of parameter to load UI texture into material"));
				MetaData->SetValue(NewProp_BaseMaterial, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_BaseMaterial, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_BaseMaterial, TEXT("ToolTip"), TEXT("Material that will be instanced to load UI texture into it"));
				MetaData->SetValue(NewProp_Height, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_Height, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_Height, TEXT("ToolTip"), TEXT("Height of the view resolution"));
				MetaData->SetValue(NewProp_Width, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_Width, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_Width, TEXT("ToolTip"), TEXT("Width of the view resolution"));
				MetaData->SetValue(NewProp_bIsTransparent, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_bIsTransparent, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_bIsTransparent, TEXT("ToolTip"), TEXT("Should this be rendered in game to be transparent?"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("Is this UI component current active?"));
				MetaData->SetValue(NewProp_DefaultURL, TEXT("Category"), TEXT("Blu"));
				MetaData->SetValue(NewProp_DefaultURL, TEXT("ModuleRelativePath"), TEXT("Public/BluEye.h"));
				MetaData->SetValue(NewProp_DefaultURL, TEXT("ToolTip"), TEXT("The default URL this UI component will load"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBluEye(Z_Construct_UClass_UBluEye, TEXT("UBluEye"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBluEye);
	UFunction* Z_Construct_UFunction_UBluJsonObj_getBooleanArray()
	{
		struct BluJsonObj_eventgetBooleanArray_Parms
		{
			FString index;
			TArray<bool> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getBooleanArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetBooleanArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, BluJsonObj_eventgetBooleanArray_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, 0, sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetBooleanArray_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets an Array of booleans for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_getBooleanValue()
	{
		struct BluJsonObj_eventgetBooleanValue_Parms
		{
			FString index;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getBooleanValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetBooleanValue_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, BluJsonObj_eventgetBooleanValue_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, BluJsonObj_eventgetBooleanValue_Parms), 0x0000000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, BluJsonObj_eventgetBooleanValue_Parms), sizeof(bool), true);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetBooleanValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a Boolean value for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_getNestedObject()
	{
		struct BluJsonObj_eventgetNestedObject_Parms
		{
			FString index;
			UBluJsonObj* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getNestedObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetNestedObject_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, BluJsonObj_eventgetNestedObject_Parms), 0x0000000000000580, Z_Construct_UClass_UBluJsonObj_NoRegister());
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetNestedObject_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a Nested JSON Object value for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_getNumArray()
	{
		struct BluJsonObj_eventgetNumArray_Parms
		{
			FString index;
			TArray<float> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getNumArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetNumArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, BluJsonObj_eventgetNumArray_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetNumArray_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets an Array of floats or numbers for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_getNumValue()
	{
		struct BluJsonObj_eventgetNumValue_Parms
		{
			FString index;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getNumValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetNumValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, BluJsonObj_eventgetNumValue_Parms), 0x0000000000000580);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetNumValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a Numerical value for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_getStringArray()
	{
		struct BluJsonObj_eventgetStringArray_Parms
		{
			FString index;
			TArray<FString> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getStringArray"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetStringArray_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(ReturnValue, BluJsonObj_eventgetStringArray_Parms), 0x0000000000000580);
			UProperty* NewProp_ReturnValue_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ReturnValue, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetStringArray_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets an Array of strings for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_getStringValue()
	{
		struct BluJsonObj_eventgetStringValue_Parms
		{
			FString index;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("getStringValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventgetStringValue_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, BluJsonObj_eventgetStringValue_Parms), 0x0000000000000580);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventgetStringValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Gets a String value for the key given"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_setBooleanValue()
	{
		struct BluJsonObj_eventsetBooleanValue_Parms
		{
			bool value;
			FString index;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("setBooleanValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventsetBooleanValue_Parms));
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventsetBooleanValue_Parms), 0x0000000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(value, BluJsonObj_eventsetBooleanValue_Parms, bool);
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(value, BluJsonObj_eventsetBooleanValue_Parms), 0x0000000000000082, CPP_BOOL_PROPERTY_BITMASK(value, BluJsonObj_eventsetBooleanValue_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets or Adds a Boolean value to this JSON object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_setNestedObject()
	{
		struct BluJsonObj_eventsetNestedObject_Parms
		{
			UBluJsonObj* value;
			FString index;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("setNestedObject"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventsetNestedObject_Parms));
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventsetNestedObject_Parms), 0x0000000000000080);
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(value, BluJsonObj_eventsetNestedObject_Parms), 0x0000000000000080, Z_Construct_UClass_UBluJsonObj_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets or Adds a Nested JSON Object value to this JSON object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_setNumValue()
	{
		struct BluJsonObj_eventsetNumValue_Parms
		{
			float value;
			FString index;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("setNumValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventsetNumValue_Parms));
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventsetNumValue_Parms), 0x0000000000000080);
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(value, BluJsonObj_eventsetNumValue_Parms), 0x0000000000000082);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets or Adds a Numerical value to this JSON object"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UBluJsonObj_setStringValue()
	{
		struct BluJsonObj_eventsetStringValue_Parms
		{
			FString value;
			FString index;
		};
		UObject* Outer=Z_Construct_UClass_UBluJsonObj();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("setStringValue"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(BluJsonObj_eventsetStringValue_Parms));
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(index, BluJsonObj_eventsetStringValue_Parms), 0x0000000000000080);
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_Native) UStrProperty(CPP_PROPERTY_BASE(value, BluJsonObj_eventsetStringValue_Parms), 0x0000000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Blu"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets or Adds a String value to this JSON object"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UBluJsonObj_NoRegister()
	{
		return UBluJsonObj::StaticClass();
	}
	UClass* Z_Construct_UClass_UBluJsonObj()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage_Blu();
			OuterClass = UBluJsonObj::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getBooleanArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getBooleanValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getNestedObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getNumArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getNumValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getStringArray());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_getStringValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_setBooleanValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_setNestedObject());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_setNumValue());
				OuterClass->LinkChild(Z_Construct_UFunction_UBluJsonObj_setStringValue());

				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getBooleanArray()); // 3994981536
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getBooleanValue()); // 685069049
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getNestedObject()); // 1108669055
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getNumArray()); // 3042091830
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getNumValue()); // 3426991601
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getStringArray()); // 247073406
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_getStringValue()); // 1059907789
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_setBooleanValue()); // 3734206052
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_setNestedObject()); // 224762150
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_setNumValue()); // 3232700847
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UBluJsonObj_setStringValue()); // 3604361062
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Blu"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("BluJsonObj.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/BluJsonObj.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UBluJsonObj(Z_Construct_UClass_UBluJsonObj, TEXT("UBluJsonObj"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UBluJsonObj);
	UPackage* Z_Construct_UPackage_Blu()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/Blu")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x7CCABD3C;
			Guid.B = 0x799480FF;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_Blu_ScriptEvent__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
